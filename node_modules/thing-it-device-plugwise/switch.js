module.exports = {
    metadata: {
        family: "plugwise",
        plugin: "switch",
        label: "Plugwise Â© Smart Switch",
        tangible: true,
        discoverable: true,
        state: [{
            id: "switch",
            label: "Switch",
            type: {
                id: "boolean"
            }
        }, {
            id: "consumption",
            label: "Consumption",
            type: {
                id: "decimal"
            }
        }, {
            id: "lastKnownMeasurementTime",
            label: "Last Known Measurement Time",
            type: {
                id: "time"
            }
        }],
        actorTypes: [],
        sensorTypes: [],
        services: [{
            id: "on",
            label: "On"
        }, {
            id: "off",
            label: "Off"
        }, {
            id: "toggle",
            label: "Toggle"
        }],
        configuration: [{
            id: "stretch",
            label: "Stretch",
            type: {id: "string"}
        }, {
            id: "id",
            label: "ID",
            type: {id: "string"}
        }, {
            id: "macAddress",
            label: "MAC Address",
            type: {id: "string"}
        }, {
            id: "hostname",
            label: "Hostname Stretch",
            type: {id: "string"}
        }, {
            id: "interval",
            label: "Polling Interval (ms)",
            type: {id: "integer"},
            default: 30000
        }]
    },
    create: function () {
        return new Switch();
    },
    discovery: function (options) {
        var discovery = new SwitchDiscovery();

        discovery.options = options;

        return discovery;
    }
};

var q = require('q');
var xml2js;
var net;
var request;
var datagram;

/**
 *
 * @constructor
 */
function SwitchDiscovery() {
    /**
     *
     * @param options
     */
    SwitchDiscovery.prototype.start = function () {
        if (this.node.isSimulated()) {
        } else {
            if (!net) {
                net = require("net");
            }

            if (!xml2js) {
                xml2js = require("xml2js");
            }

            if (!request) {
                request = require("request");
            }

            if (!datagram) {
                datagram = require("dgram");
            }

            this.interval = setInterval(function () {
                console.log("Attempt to connect to Stretch");

                var dgram = require("dgram");

                this.socket = dgram.createSocket('udp4');

                this.socket.bind(4991, function () {
                    console.log("MM");

                    this.socket.addMembership("224.9.9.1");
                }.bind(this));

                this.socket.on('message', function (msg) {
                    console.log("Message", message);
                });
                this.socket.on('error', function (error) {
                    console.log("Error", error);
                });

                var message = new Buffer("plugwise stretch");

                this.socket.send(message, 0, message.length, 4991, "224.9.9.1", function (error) {
                    console.error("Cannot send", error);
                    this.socket.close();
                }.bind(this));

                //var socket = new net.Socket();
                //
                //socket.connect({port: 4991, host: "0:0:0:0:0:ffff:e009:901"/*"224.9.9.1"*/, family: "IPv6"}, function () {
                //    console.log('Connected');
                //    socket.write("plugwise stretch");
                //});
                //
                //socket.on('error', function (error) {
                //    console.error("Failed to connect to Plugwise Advertisement Service", error);
                //}.bind(this));
                //socket.on('data', function (message) {
                //    var content = message.toString("utf-8");
                //
                //    console.log(content);
                //
                //    content = xml2js.parseString(content);
                //
                //    for (var n in content) {
                //        request.get({
                //            url: "http://" + content[this.nn]["lan_ip"] + "/minirest/appliances"
                //        }, function (error, response, body) {
                //            xml2js.parseString(body, function (error, result) {
                //                if (!error && result.type === "3") {
                //                    var device = new Switch();
                //
                //                    device.configuration = this.discovery.defaultConfiguration;
                //                    device.configuration.uuid = result.mac_address;
                //                    device.configuration.macAddress = result.id;
                //                    device.configuration.id = result.mac_address;
                //                    device.configuration.label = "Plugwise Switch " + result.name;
                //                    device.configuration.hostname = content[this.n]["lan_ip"];
                //
                //                    this.discovery.advertiseDevice(device);
                //                }
                //            }.bind({discovery: this, n: n}));
                //        }.bind(this));
                //    }
                //
                //    socket.destroy();
                //}.bind(this));
            }.bind(this), 5000)
        }
    };

    /**
     *
     * @param options
     */
    SwitchDiscovery.prototype.stop = function () {
        if (this.interval) {
            cleanInterval(this.interval);
        }
    };
}

/**
 *
 */
function Switch() {
    /**
     *
     */
    Switch.prototype.start = function () {
        var deferred = q.defer();

        this.state = {switch: false, consumption: 0};

        if (this.isSimulated()) {
            this.interval = setInterval(function () {
                if (this.state.switch) {
                    this.state.consumption += new Date().getTime() % 4;
                }

                this.publishStateChange();
            }.bind(this), 10000);

            deferred.resolve();
        } else {
            if (!xml2js) {
                xml2js = require('xml2js');
            }

            if (!request) {
                request = require('request');
            }

            this.pollState();

            this.interval = setInterval(function () {
                this.pollState();
            }.bind(this), 30000/*this.configuration.interval*/); // TODO Fix defaults

            deferred.resolve();
        }

        return deferred.promise;
    };

    /**
     *
     */
    Switch.prototype.stop = function () {
        if (this.interval) {
            clearInterval(this.interval);
        }
    };

    /**
     *
     */
    Switch.prototype.url = function (path) {
        return "http://stretch:" + this.configuration.stretch + "@" + this.configuration.host + "/minirest/" + path;
    };

    /**
     *
     */
    Switch.prototype.setState = function (state) {
        if (this.isSimulated()) {
            this.state = state;

            this.publishStateChange();
        } else {
            request.post({
                url: this.url("appliances;name=" + this.configuration.name + "/power_state=" + state ? "on" : "off"),
                json: true
            }, function (error, response, body) {
                this.state = state;

                this.publishStateChange();
            }.bind(this));
        }
    };

    /**
     *
     */
    Switch.prototype.getState = function () {
        return this.state;
    };

    /**
     *
     */
    Switch.prototype.pollState = function () {
        this.logInfo("modules;id=" + this.configuration.id);

        request.get({
            url: this.url("modules;id=" + this.configuration.id)
        }, function (error, response, body) {
            if (error) {
                this.logError(error);
                this.publishMessage(error);
            }
            else {
                xml2js.parseString(body, function (error, result) {
                    if (!result.modules || !result.modules.module || !result.modules.module[0]) {
                        this.logError("Cannot find module");
                        this.publishMessage(error);
                    } else {
                        var powerState = result.modules.module[0].power_state[0] === "on";
                        var currentPowerUsage = parseInt(result.modules.module[0].current_power_usage[0]);
                        var lastKnownMeasurementDate = result.modules.module[0].last_known_measurement_date[0];

                        this.logInfo("Switch", powerState);
                        this.logInfo("Power", currentPowerUsage);
                        this.logInfo("Last Known Measurement Date", lastKnownMeasurementDate);

                        if (powerState != this.state.switch || currentPowerUsage != this.state.consumption || lastKnownMeasurementDate != this.state.lastKnownMeasurementDate) {
                            this.state.switch = powerState;
                            this.state.consumption = currentPowerUsage;
                            this.state.lastKnownMeasurementDate = lastKnownMeasurementDate;

                            this.publishStateChange();
                        }
                    }
                }.bind(this));
            }
        }.bind(this));
    };

    /**
     *
     */
    Switch.prototype.on = function () {
        this.setState({switch: true});
    };

    /**
     *
     */
    Switch.prototype.off = function () {
        this.setState({switch: false});
    };

    /**
     *
     */
    Switch.prototype.toggle = function () {
        if (this.state.switch) {
            this.off();
        } else {
            this.on();
        }
    };
}
