{
  "name": "thing-it-device-itach",
  "version": "0.0.18",
  "description": "[thing-it-node] Device Plugin for ITach bridges (e.g. Wifi/IR).",
  "authors": "Marc Gille",
  "license": "MIT, EPL",
  "keywords": [
    "IoT",
    "thing-it",
    "ITach",
    "Infrared",
    "Universal Remote"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/marcgille/thing-it-device-itach.git"
  },
  "dependencies": {
    "node-itach": "^1.1.0"
  },
  "readme": "# thing-it-device-itach\n\n[![NPM](https://nodei.co/npm/thing-it-device-itach.png)](https://nodei.co/npm/thing-it-device-itach/)\n[![NPM](https://nodei.co/npm-dl/thing-it-device-itach.png)](https://nodei.co/npm/thing-it-device-itach/)\n\n[thing-it-node] Device Plugin for [ITach Bridges](http://www.globalcache.com/products/itach/) (e.g. Wifi/Infrared).\n\n<img src=\"./documentation/images/itach.jpg\">\n\nThis allows you to \n\n* control the devices you usually control with your IR remotes devices from a mobile UI over the Internet,\n* define complex Services, Event Processing, Storyboards and Jobs combining the IR-controlled devices with other Devices, Sensors and Actors.\n\nby means of [thing-it-node](https://github.com/marcgille/thing-it-node) and [thing-it.com](http://www.thing-it.com).\n\nE.g. you could switch of the TV if the motion detector has not detected any movement in the room for 10 minutes (because you fell asleep) or\nstart your cleaning robot with a more sophisticated schedule. \n\n## Installation\n\nAfter you have \n\n* [set up](http://www.thing-it.com/thing-it/index.html?document=gettingStarted#/documentationPanel) your [thing-it] Node Box and \n* configured or copied a [thing-it] Mesh with an ITach Bridge, \n\nconnect your ITach Bridge to your [thing-it] Node Box via the appropriate settings for the ITach device (IP-Address) and connect the IR Emitters, e.g.\nlike\n\n<img src=\"./documentation/images/itach-setup.jpg\">\n\n## User Interface\n\nUser Interfaces depend on the remotes you have been using in your [thing-it] Node Mesh/Configuration. E.g. for a [Configuration\nwith a Samsung TV and iRobot Roomba Cleaning Robot](./examples/samsungAndRoombaConfiguration.js):\n\n<img src=\"./documentation/images/samsung-and-roomba-ui.jpg\">\n\n## Adding your own Remotes\n\nWriting your own Remote Plugins is very easy:\n\nPoint [thing-it-node] to the [Sniffer Configuration](./examples/snifferConfiguration.js) or push the corresponding \nMesh from the [thing-it.com Mesh Market]() to you local Node Box.\n\nLog in to [thing-it-node] locally or via thing-it.com. The UI should show you the Sniffer UI:\n\n<img src=\"./documentation/images/sniffer-ui.jpg\">\n\nClick all relevant buttons on your remote and record the corresponding codes. With these create a file myRemote.js like\n\n```\nmodule.exports = require(\"./lib/itach\").createExports({\n    family: \"myRemote\", plugin: \"myRemote\",\n    label: \"My Remote\"\n}, {\n    \"button1\": code1,\n    \"button2\": code2,\n    ...\n});\n```\n\nand create an **myRemote.html** file under /web, e.g.\n\n```\n<table class=\"formTable\">\n    <tr>\n        <td>\n            <div class=\"circleButton\" ng-click=\"panel.callDeviceService(component, 'button1')\">1\n            </div>\n        </td>\n        <td>\n            <div class=\"circleButton\" ng-click=\"panel.callDeviceService(component, 'button2')\">2\n            </div>\n        </td>\n    </tr>\n</table>\n\n```\n\nYou can surely be more cretive with your UI and finally get the remote control layout you always wanted.\n\n",
  "readmeFilename": "README.md",
  "gitHead": "090f59a711d9dc226cbee0d24893005b2ba3c133",
  "bugs": {
    "url": "https://github.com/marcgille/thing-it-device-itach/issues"
  },
  "homepage": "https://github.com/marcgille/thing-it-device-itach#readme",
  "_id": "thing-it-device-itach@0.0.18",
  "scripts": {},
  "_shasum": "1993138ce1b62981f1aa8faf4c76d5ec5465adc4",
  "_from": "thing-it-device-itach@0.0.18"
}
