module.exports = {
    metadata: {
        family: "thermostat",
        plugin: "thermostat",
        label: "Plugwise Â© Anna Thermostat",
        tangible: true,
        discoverable: true,
        state: [{
            id: "nominalTemperature",
            label: "Nominal Temperature",
            type: {
                id: "decimal"
            }
        }, {
            id: "measuredTemperature",
            label: "Measured Temperature",
            type: {
                id: "decimal"
            }
        }, {
            id: "boilerActive",
            label: "Boiler Active",
            type: {
                id: "boolean"
            }
        }],
        actorTypes: [],
        sensorTypes: [],
        services: [{id: "lowerNominalTemperature", label: "Lower Nominal Temperature"}, {
            id: "raiseNominalTemperature",
            label: "Raise Nominal Temperature"
        }],
        configuration: []
    },
    create: function () {
        return new Thermostat();
    },
    discovery: function (options) {
        var discovery = new ThermostatDiscovery();

        discovery.options = options;

        return discovery;
    }
};

var q = require('q');

function ThermostatDiscovery() {
    /**
     *
     * @param options
     */
    ThermostatDiscovery.prototype.start = function () {
        if (this.node.isSimulated()) {
        } else {
        }
    };

    /**
     *
     * @param options
     */
    ThermostatDiscovery.prototype.stop = function () {
    };
}

/**
 *
 */
function Thermostat() {
    /**
     *
     */
    Thermostat.prototype.start = function () {
        var deferred = q.defer();

        this.state = {nominalTemperature: 22, measuredTemperature: 22};

        if (this.isSimulated()) {
            setInterval(function () {
                if (this.state.boilerActive) {
                    this.state.measuredTemperature += 1.0;
                } else {
                    this.state.measuredTemperature -= 0.5;
                }

                this.state.boilerActive = this.state.measuredTemperature < this.state.nominalTemperature;

                this.publishStateChange();
            }.bind(this), 10000);

            deferred.resolve();
        } else {
            deferred.resolve();
        }

        return deferred.promise;
    };

    /**
     *
     */
    Thermostat.prototype.setState = function (state) {
        this.state = state;

        this.publishStateChange();
    };

    /**
     *
     */
    Thermostat.prototype.getState = function () {
        return this.state;
    };

    /**
     *
     */
    Thermostat.prototype.lowerNominalTemperature = function () {
        this.state.nominalTemperature -= 0.5;

        this.publishStateChange();
    };

    /**
     *
     */
    Thermostat.prototype.raiseNominalTemperature = function () {
        this.state.nominalTemperature += 0.5;

        this.publishStateChange();
    };
}
