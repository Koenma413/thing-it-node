function GroupConfigurationPage() {
    /**
     *
     */
    GroupConfigurationPage.prototype.initialize = function (console, group) {
        this.id = "groupConfiguration";
        this.console = console;

        if (group) {
            this.groupId = group.id;
        }

        return this;
    };

    /**
     *
     */
    GroupConfigurationPage.prototype.show = function () {
        var deferred = $.Deferred();

        if (this.groupId) {
            this.group = this.console.node.getGroup(this.groupId); // TODO Need to _.deepCopy()
        }
        else {
            this.group = {icon: "icon sl-house-1", devices: [], actors: [], sensors: [], services: []};
        }

        this.deviceFlags = {};
        this.actorFlags = {};
        this.sensorFlags = {};
        this.serviceFlags = {};
        this.sensors = [];
        this.actors = [];

        for (var m = 0; m < this.console.node.devices.length; ++m) {
            this.deviceFlags[this.console.node.devices[m].id] = this.isInArray(this.group.devices, this.console.node.devices[m].id);

            for (var l = 0; l < this.console.node.devices[m].actors.length; ++l) {
                this.actors.push(this.console.node.devices[m].actors[l]);
                this.actorFlags[this.console.node.devices[m].actors[l].fullId()] = this.isInArray(this.group.actors, this.console.node.devices[m].actors[l].fullId());
            }

            for (var l = 0; l < this.console.node.devices[m].sensors.length; ++l) {
                this.sensors.push(this.console.node.devices[m].sensors[l]);
                this.sensorFlags[this.console.node.devices[m].sensors[l].fullId()] = this.isInArray(this.group.sensors, this.console.node.devices[m].sensors[l].fullId());
            }
        }

        for (var m = 0; m < this.console.node.services.length; ++m) {
            this.serviceFlags[this.console.node.services[m].id] = this.isInArray(this.group.services, this.console.node.services[m].id);
        }

        deferred.resolve();

        return deferred.promise();
    };

    /**
     *
     */
    GroupConfigurationPage.prototype.isInArray = function (array, string) {
        for (var n in array)
        {
            if (array[n] === string)
            {
                return true;
            }
        }

        return false;
    };

    /**
     *
     */
    GroupConfigurationPage.prototype.convertFlags = function () {
        for (var n in this.deviceFlags) {
            if (this.deviceFlags[n]) {
                this.group.devices.push(n);
            }
        }

        for (var n in this.actorFlags) {
            if (this.actorFlags[n]) {
                this.group.actors.push(n);
            }
        }

        for (var n in this.sensorFlags) {
            if (this.sensorFlags[n]) {
                this.group.sensors.push(n);
            }
        }

        for (var n in this.serviceFlags) {
            if (this.serviceFlags[n]) {
                this.group.services.push(n);
            }
        }
    };

    /**
     *
     */
    GroupConfigurationPage.prototype.createGroup = function () {
        this.group.id = Utils.getNextDefaultId(this.console.node.groups, "group", 0);

        this.convertFlags();

        this.console.consoleService.createGroup(this.console.node, this.group).done(function (node) {
            this.console.node = node;

            this.console.popPage();
        }.bind(this)).fail(function (error) {
            console.error(error);
        }.bind(this));
    };

    /**
     *
     */
    GroupConfigurationPage.prototype.updateGroup = function () {
        this.group.devices = [];
        this.group.actors = [];
        this.group.sensors = [];
        this.group.services = [];

        this.convertFlags();

        this.console.consoleService.updateGroup(this.console.node, this.group).done(function (node) {
            this.console.node = node;

            this.console.popPage();
        }.bind(this)).fail(function (error) {
            console.error(error);
        }.bind(this));
    };

    /**
     *
     */
    GroupConfigurationPage.prototype.deleteGroup = function () {
        this.console.openConfirmationDialog("You are going to delete Group [" + this.group.label + "]. Please confirm.", function () {
            this.console.consoleService.deleteGroup(this.console.node, this.group).done(function (node) {
                this.console.node = node;

                this.console.popPage();
            }.bind(this)).fail(function (error) {
                console.error(error);
            }.bind(this));

        }.bind(this));
    };

    /**
     *
     */
    GroupConfigurationPage.prototype.leave = function () {
    };
}
