module.exports = {
    metadata: {
        plugin: "radioThermostat",
        label: "Radio Thermostat",
        role: "device",
        family: "radioThermostat",
        deviceTypes: [],
        services: [],
        state: [{
            id: "mode", label: "Mode",
            type: {
                id: "string"
            }
        }, {
            id: "operatingState", label: "Operating State",
            type: {
                id: "string"
            }
        }, {
            id: "setpoint", label: "Setpoint",
            type: {
                id: "decimal"
            }
        }, {
            id: "temperature", label: "Temperature",
            type: {
                id: "decimal"
            }
        }, {
            id: "fanMode", label: "Fan Mode",
            type: {
                id: "string"
            }
        }, {
            id: "fanState", label: "Fan State",
            type: {
                id: "string"
            }
        }, {
            id: "hold", label: "Hold",
            type: {
                id: "boolean"
            }
        }, {
            id: "override", label: "Overrride",
            type: {
                id: "boolean"
            }
        }],
        configuration: [
            {
                label: "Host",
                id: "Host",
                type: {
                    id: "string"
                },
                defaultValue: ""
            },
            {
                label: "Name",
                id: "name",
                type: {
                    id: "name"
                },
                defaultValue: ""
            },
            {
                label: "Update Interval",
                id: "updateInterval",
                type: {
                    id: "integer"
                },
                defaultValue: "3000"
            },
        ]
    },
    create: function () {
        return new RadioThermostat();
    }
};

var q = require('q');
var request;
var tstat = "/tstat";
var updating = false;

/**
 *
 */
function RadioThermostat() {
    /**
     *
     */
    RadioThermostat.prototype.start = function () {
        var deferred = q.defer();

        this.state = {};

        if (this.isSimulated()) {
        } else {
            this.pollState(function (error) {
            });

            this.pollInterval = setInterval(function () {
                this.pollState();
            }.bind(this), 30000);
        }

        deferred.resolve();

        return deferred.promise;
    };

    /**
     *
     */
    RadioThermostat.prototype.stop = function () {
        var deferred = q.defer();


        deferred.resolve();

        return deferred.promise;
    };

    /**
     *
     */
    RadioThermostat.prototype.getState = function () {
        return this.state;
    };

    /**
     *
     */
    RadioThermostat.prototype.setState = function (state) {
    };

    RadioThermostat.prototype.pollState = function (callback) {
        this.logDebug("Polling state for Radio Thermostat with name " + this.configuration.name + " located at " + this.configuration.host);
        var url = "http://" + this.configuration.host + tstat;

        if (!request) {
            request = require('request');
        }

        request.get({
            url: url
        }, function (error, response, body) {
            if (!updating) {
                if (error) {
                    this.logError("Error communicating to Radio Thermostat.", error, body);
                    callback(error, null);
                }
                else {
                    var thermostatState = JSON.parse(body);

                    this.state.temperature = thermostatState.temp;

                    switch (thermostatState.tmode) {
                        case 0:
                            this.state.mode = "OFF";
                            break;
                        case 1:
                            this.state.mode = "HEAT";
                            this.state.setpoint = thermostatState.t_heat;
                            break;
                        case 2:
                            this.state.mode = "COOL";
                            this.state.setpoint = thermostatState.t_cool;
                            break;
                        case 3:
                            this.state.mode = "AUTO";

                            if (thermostatState.t_heat) {
                                this.state.setpoint = thermostatState.t_heat;
                            } else if (thermostatState.t_cool) {
                                this.state.setpoint = thermostatState.t_cool;
                            }

                            break;
                    }

                    switch (thermostatState.tstate) {
                        case 0:
                            this.state.operatingState = "OFF";
                            break;
                        case 1:
                            this.state.operatingState = "HEAT";
                            break;
                        case 2:
                            this.state.operatingState = "COOL";
                            break;
                    }

                    switch (thermostatState.fmode) {
                        case 0:
                            this.state.fanMode = "AUTO";
                            break;
                        case 1:
                            this.state.fanMode = "AUTO/CIRCULATE";
                            break;
                        case 2:
                            this.state.fanMode = "ON";
                            break;
                    }

                    switch (thermostatState.fstate) {
                        case 0:
                            this.state.fanState = "AUTO";
                            break;
                        case 1:
                            this.state.fanState = "AUTO/CIRCULATE";
                            break;
                        case 2:
                            this.state.fanState = "ON";
                            break;
                    }

                    switch (thermostatState.hold) {
                        case 0:
                            this.state.hold = false;
                            break;
                        case 1:
                            this.state.hold = true;
                            break;
                    }

                    switch (thermostatState.override) {
                        case 0:
                            this.state.override = false;
                            break;
                        case 1:
                            this.state.override = true;
                            break;
                    }

                    this.logDebug("State", this.state);
                    this.publishStateChange();
                }
            } else {
                this.logDebug("Ignoring stale update.");
            }
        }.bind(this));
    }

    /**
     *
     */
    RadioThermostat.prototype.setSetpoint = function (targetTemperature) {
        this.state.setpoint = targetTemperature;
        if (this.state.mode == "HEAT") {
            body = '{"it_heat":' + targetTemperature + '}';
        } else if (this.state.mode == "COOL") {
            body = '{"it_cool":' + targetTemperature + '}';
        } else {
            // Cannot set temperature in auto mode
        }

        if (body) {
            this.sendPostRequest(body);
        }
    }

    /**
     *
     */
    RadioThermostat.prototype.incrementSetpoint = function () {
        this.logDebug("Called incrementSetpoint()");
        this.setSetpoint(this.state.setpoint + 1);
    };

    /**
     *
     */
    RadioThermostat.prototype.decrementSetpoint = function () {
        this.logDebug("Called decrementSetpoint()");
        this.setSetpoint(this.state.setpoint - 1);
    };

    /**
     *
     */
    RadioThermostat.prototype.setHold = function (hold) {
        var body;
        this.state.hold = hold;

        if (hold) {
            body = '{"hold":1}';
        } else {
            body = '{"hold":0}';
        }

        this.sendPostRequest(body);
    }

    /**
     *
     */
    RadioThermostat.prototype.holdOn = function () {
        this.setHold(true);
    }

    /**
     *
     */
    RadioThermostat.prototype.holdOff = function () {
        this.setHold(false);
    }

    /**
     *
     */
    RadioThermostat.prototype.holdToggle = function () {
        if (this.state.hold) {
            this.holdOff();
        } else {
            this.holdOn();
        }
    }

    /**
     *
     */
    RadioThermostat.prototype.setFanMode = function (fanMode) {
        var body;
        this.state.mode = fanMode;

        if (fanMode == "AUTO") {
            body = '{"fmode":0}';
        } else if (fanMode == "AUTO/CIRCULATE") {
            body = '{"fmode":1}';
        } else if (fanMode == "ON") {
            body = '{"fmode":2}';
        }

        this.sendPostRequest(body);
    }

    /**
     *
     */
    RadioThermostat.prototype.setFanModeAuto = function (fanMode) {
        this.setFanMode("AUTO");
    }

    /**
     *
     */
    RadioThermostat.prototype.setFanModeAutoCirculate = function (fanMode) {
        this.setFanMode("AUTO/CIRCULATE");
    }

    /**
     *
     */
    RadioThermostat.prototype.setFanModeOn = function (fanMode) {
        this.setFanMode("ON");
    }

    /**
     *
     */
    RadioThermostat.prototype.setMode = function (mode) {
        var body;
        this.state.mode = mode;

        if (mode == "OFF") {
            body = '{"tmode":0}';
        } else if (mode == "HEAT") {
            body = '{"tmode":1}';
        } else if (mode == "COOL") {
            body = '{"tmode":2}';
        } else if (mode == "AUTO") {
            body = '{"tmode":3}';
        }

        this.sendPostRequest(body);
    }

    /**
     *
     */
    RadioThermostat.prototype.setModeOff = function () {
        this.setMode("OFF");
    }

    /**
     *
     */
    RadioThermostat.prototype.setModeHeat = function () {
        this.setMode("HEAT");
    }

    /**
     *
     */
    RadioThermostat.prototype.setModeCool = function () {
        this.setMode("COOL");
    }

    /**
     *
     */
    RadioThermostat.prototype.setModeAuto = function () {
        this.setMode("AUTO");
    }

    /**
     *
     */
    RadioThermostat.prototype.sendPostRequest = function (body, callback) {
        this.publishStateChange();

        if (this.isSimulated()) {
        } else {
            updating = true;

            var url = "http://" + this.configuration.host + tstat;

            var updatingTimeout = setTimeout(function () {
                updating = false;
            }, 10000);

            if (body) {
                if (!request) {
                    request = require('request');
                }

                request.post({
                    url: url,
                    method: 'POST',
                    body: body
                }, function (error, response, body) {
                    updating = false;

                    if (error) {
                        this.logError("Error communicating to Radio Thermostat.", error, body);
                    }
                    else {
                        this.pollState();

                        if (callback) {
                            callback(body);
                        }
                    }

                    if (updatingTimeout) {
                        clearTimeout(updatingTimeout);
                    }
                }.bind(this));
            }
        }
    }
};
