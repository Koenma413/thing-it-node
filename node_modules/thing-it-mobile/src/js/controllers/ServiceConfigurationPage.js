function ServiceConfigurationPage() {
    /**
     *
     */
    ServiceConfigurationPage.prototype.initialize = function (console, service) {
        this.id = "serviceConfiguration";
        this.console = console;

        if (service) {
            this.serviceId = service.id;
        }

        return this;
    };

    /**
     *
     */
    ServiceConfigurationPage.prototype.show = function () {
        var deferred = $.Deferred();

        if (this.serviceId) {
            this.service = this.console.node.getService(this.serviceId); // TODO Need to _.deepCopy()
        }
        else {
            this.service = {type: "script", content: {}};
        }

        this.deviceFlags = {};
        this.actorFlags = {};
        this.sensorFlags = {};
        this.sensors = [];
        this.actors = [];

        for (var m = 0; m < this.console.node.devices.length; ++m) {
            this.deviceFlags[this.console.node.devices[m].id] = {flag: false, device: this.console.node.devices[m]};

            for (var l = 0; l < this.console.node.devices[m].actors.length; ++l) {
                this.actors.push(this.console.node.devices[m].actors[l]);
                this.actorFlags[this.console.node.devices[m].actors[l].fullId()] = {
                    flag: false,
                    actor: this.console.node.devices[m].actors[l]
                };
            }

            for (var l = 0; l < this.console.node.devices[m].sensors.length; ++l) {
                this.sensors.push(this.console.node.devices[m].sensors[l]);
                this.sensorFlags[this.console.node.devices[m].sensors[l].fullId()] = {
                    flag: false,
                    sensor: this.console.node.devices[m].sensors[l]
                };
            }
        }

        deferred.resolve();

        return deferred.promise();
    };

    /**
     *
     */
    ServiceConfigurationPage.prototype.generateScript = function () {
        var script = "";
        var first;

        for (var n in this.deviceFlags) {
            if (this.deviceFlags[n].flag) {

                script += this.deviceFlags[n].device.id;
                script += ".setState({";

                first = true;

                for (var m in this.deviceFlags[n].device._state) {
                    if (first)
                    {
                        first = false;
                    }
                    else
                    {
                        script += ", ";
                    }

                    script += m;
                    script += ": ";
                    script += this.deviceFlags[n].device._state[m]; // TODO Consider type (string, boolean, number, object)
                }

                script += "});";
            }
        }

        for (var n in this.actorFlags) {
            if (this.actorFlags[n].flag) {

                script += this.actorFlags[n].actor.fullId();
                script += ".setState({";

                first = true;

                for (var m in this.actorFlags[n].actor._state) {
                    if (first)
                    {
                        first = false;
                    }
                    else
                    {
                        script += ", ";
                    }

                    script += m;
                    script += ": ";
                    script += this.actorFlags[n].actor._state[m]; // TODO Consider type (string, boolean, number, object)
                }

                script += "});";
            }
        }

        return script;
    };

    /**
     *
     */
    ServiceConfigurationPage.prototype.createService = function () {
        this.service.id = Utils.getNextDefaultId(this.console.node.services, "service", 0);

        this.service.content.script = this.generateScript();

        this.console.consoleService.createService(this.console.node, this.service).done(function (node) {
            this.console.node = node;

            this.console.popPage();
        }.bind(this)).fail(function (error) {
            console.error(error);
        }.bind(this));
    };

    /**
     *
     */
    ServiceConfigurationPage.prototype.updateService = function () {
        this.convertFlags();

        this.console.consoleService.updateService(this.console.node, this.service).done(function (node) {
            this.console.node = node;

            this.console.popPage();
        }.bind(this)).fail(function (error) {
            console.error(error);
        }.bind(this));
    };

    /**
     *
     */
    ServiceConfigurationPage.prototype.deleteService = function () {
        this.console.openConfirmationDialog("You are going to delete Service [" + this.service.label + "]. Please confirm.", function () {
            this.console.consoleService.deleteService(this.console.node, this.service).done(function (node) {
                this.console.node = node;

                this.console.popPage();
            }.bind(this)).fail(function (error) {
                console.error(error);
            }.bind(this));

        }.bind(this));
    };

    /**
     *
     */
    ServiceConfigurationPage.prototype.leave = function () {
    };
}
