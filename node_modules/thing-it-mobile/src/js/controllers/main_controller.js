function MobileConsole($scope, $rootScope, $http) {
    this.rootScope = $rootScope;
    this.scope = $scope;
    this.Ui = $scope.Ui;
    this.consoleService = new ConsoleService($http);
    this.io = io;
    this.pageStack = [];
    this.sensorPlotData = {};
    this.plotData = {};
    this.deviceAdvertisementDialog = {};
    this.userCreationDialog = {};
    this.deviceDialog = {};
    this.actorDialog = {};
    this.sensorDialog = {};
    this.messageDialog = {};
    this.confirmationDialog = {};

    this.Ui.initialize($scope, "deviceAdvertisementDialog");
    this.Ui.initialize($scope, "userCreationDialog");
    this.Ui.initialize($scope, "deviceDialog");
    this.Ui.initialize($scope, "actorDialog");
    this.Ui.initialize($scope, "sensorDialog");
    this.Ui.initialize($scope, "messageDialog");
    this.Ui.initialize($scope, "confirmationDialog");

    this.speech = initializeSpeech(this);

    this.refreshServer();
}

/**
 *
 */
MobileConsole.prototype.refreshServer = function () {
    if (!this.settings) {
        this.settings = this.consoleService.initializeSettings();
    }

    this.consoleService.refreshRootUrl();

    if (this.settings.server == "tip") {
        this.rootPage(this.loginPage = new LoginPage().initialize(this));
    }
    else {
        // Obtain authentication settings

        this.consoleService
            .getSettings()
            .done(
            function (settings) {
                this.settings.authentication = settings.authentication;

                if (this.settings.authentication == "none") {
                    this.login();
                }
                else {
                    this.rootPage(this.loginPage = new LoginPage().initialize(this));
                }
            }.bind(this)).fail(function (error) {
                console.log("Get settings error");
                this
                    .openMessageDialog(error, "error");
            }.bind(this));
    }
};

/**
 *
 */
MobileConsole.prototype.showPage = function (page, object) {
    try {
        window.location.href = "#/" + page.id;

        var promise;

        if (object) {
            promise = page.show(object);
        } else {
            promise = page.show();
        }

        promise.done(function () {
            this.safeApply(function () {
            }.bind(this));
        }.bind(this)).fail(function (error) {
            console.trace(error);

            this
                .openMessageDialog(error, "error");
        });
    }
    catch (error) {
        console.trace(error);

        this
            .openMessageDialog(error, "error");
    }
};

/**
 *
 */
MobileConsole.prototype.topPage = function () {
    if (this.pageStack.length) {
        return this.pageStack[this.pageStack.length - 1];
    }

    return null;
};

/**
 *
 */
MobileConsole.prototype.pushPage = function (page) {
    if (this.topPage()) {
        this.topPage().leave();
    }

    this.pageStack.push(page);
    this.showPage(page);
};

/**
 *
 */
MobileConsole.prototype.popPage = function () {
    if (this.topPage()) {
        try {
            this.pageStack.pop().leave();
        }
        catch (error) {
            this
                .openMessageDialog("Failed closing page: " + error, "error");
        }
    }

    try {
        this.showPage(this.topPage());
    }
    catch (error) {
        this
            .openMessageDialog("Failed closing page: " + error, "error");
    }
};

/**
 *
 */
MobileConsole.prototype.rootPage = function (page) {
    if (this.topPage()) {
        this.pageStack.pop().leave();
    }

    this.pageStack = [page];

    this.showPage(page);
};

/**
 *
 */
MobileConsole.prototype.openDeviceAdvertisementDialog = function () {
    this.Ui.turnOn("deviceAdvertisementDialog");
};

/**
 *
 */
MobileConsole.prototype.closeDeviceAdvertisementDialog = function () {
    this.Ui.turnOff("deviceAdvertisementDialog");
};

/**
 *
 */
MobileConsole.prototype.registerDevice = function () {
    this.consoleService.registerDevice(this.node, this.deviceAdvertisementDialog.device).done(function (node) {
        if (this.settings.server == "local") {
            this
                .pushNodePage(
                node);
            this.safeApply();
            this.closeDeviceAdvertisementDialog();
        }
        else {
            // TODO
            this.closeDeviceAdvertisementDialog();
        }
    }.bind(this)).fail(function (error) {
        this
            .openMessageDialog(error, "error");
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.login = function (credentials) {
    this.consoleService
        .login(credentials)
        .done(
        function (loggedInUser) {
            this.loggedInUser = loggedInUser;

            this.consoleService
                .getDeviceTypes()
                .done(
                function (deviceTypes) {
                    this.deviceTypes = deviceTypes;

                    console.log("Device Type", deviceTypes);

                    if (this.settings.server === "local") {
                        this.consoleService
                            .getNode()
                            .done(
                            function (node) {
                                this.node = node;
                                this.loggedInUser = User.bind(node, loggedInUser);

                                console.log("Node 1 ==> ", node);
                                console.log("Logged-In User ===>", this.loggedInUser);

                                this
                                    .pushNodePage(
                                    node);
                            }.bind(this))
                            .fail(function (error) {
                                this
                                    .openMessageDialog(error, "error");
                            }.bind(this));
                    }
                    else {
                        this
                            .pushMeshesPage();
                    }
                }.bind(this))
                .fail(function (error) {
                    console.trace(error);

                    this
                        .openMessageDialog(error, "error");
                }.bind(this));
        }.bind(this)).fail(function (error) {
            console.trace(error);

            this
                .openMessageDialog(error, "error");
        }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.connectNode = function (node) {
    this.namespace = this.consoleService.connectNode(
        this.io, node);

    this.namespace.on("connection", function (socket) {
    }.bind(this));
    this.namespace.on("disconnect", function (socket) {
        this.safeApply(function () {
            node.state = "disconnected";
        }.bind(this));
    }.bind(this));
    this.namespace.on("heartbeat", function (details) {
        this.safeApply(function () {
            node.state = "running";
            node.lastHeartbeat = new Date().getTime();

        }.bind(this));
    }.bind(this));
    this.namespace.on("message", function (message) {
        console.log("Receiving message");
        console.log(message);
    }.bind(this));
    this.namespace
        .on(
        "event",
        function (event) {
            console.log("Receiving event");
            console.log(event);

            if (event.sensor) {
                console.log(node.getDevice(
                    event.device).getSensor(
                    event.sensor).device);

                node.getDevice(event.device)
                    .getSensor(event.sensor).value = event.value;
                node.getDevice(event.device)
                    .getSensor(event.sensor).lastEventTimestamp = new Date()
                    .getTime();

                if (event.type == "valueChange") {
                    console.log(event);
                    node.getDevice(event.device)
                        .getSensor(event.sensor).lastValueChangeTimestamp = new Date()
                        .getTime();

                    if (event.sensor) {
                        this.addValue(event.device,
                            event.sensor, event.value);
                    } else {
                        this.writeToDeviceStream(event.device,
                            event.value);
                    }

                    if (this.topPage().id == "sensorMonitoringPage"
                        && this.topPage().sensor.device.id == event.device
                        && this.topPage().sensor.id == event.sensor) {
                        this.topPage().updatePlot();
                    }
                }
            }
            else {
                var device = node.getDevice(event.device);

                console.log("Trigger event:");
                console.log(JSON.stringify(event));

                window.postMessage(JSON.stringify(event), window.location.href);
            }

            this.safeApply();
        }.bind(this));
    this.namespace.on("deviceStateChange", function (deviceStateChange) {
        this.safeApply(function () {
            this.onDeviceStateChanged(deviceStateChange);
        }.bind(this));
    }.bind(this));
    this.namespace.on("actorStateChange", function (actorStateChange) {
        console.log("Receiving Actor State Change");
        this.safeApply(function () {
            this.onActorStateChanged(actorStateChange);
        }.bind(this));
    }.bind(this));
    this.namespace.on("storyboardProgress", function (storyboardProgress) {
        console.log("Storyboard Progress ");
        console.log(storyboardProgress);

        this.safeApply(function () {
            this.onStoryboardProgress(storyboardProgress);
        }.bind(this));
    }.bind(this));
    this.namespace.on("deviceAdvertisement", function (device) {
        console.log("Device advertisement ");
        console.log(device);

        this.onDeviceAdvertisement(device);
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.logout = function () {
    this.consoleService.logout().done(function () {
        this.loggedInUser = null;

        this.safeApply();
        this.rootPage(this.loginPage);
    }.bind(this)).fail(function (error) {
        this
            .openMessageDialog(error, "error");
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.pushMeshesPage = function () {
    this.pushPage(new MeshesPage().initialize(this));
};

/**
 *
 */
MobileConsole.prototype.pushMeshPage = function (mesh) {
    this.pushPage(new MeshPage().initialize(this, mesh));
};

/**
 *
 */
MobileConsole.prototype.openNodePage = function (mesh, node) {
    this.consoleService
        .getNode(mesh, node)
        .done(
        function (node) {
            this.pushNodePage(node);
        }.bind(this)).fail(function (error) {
            this
                .openMessageDialog("Failed to retrieve Node details: " + error, "error");
        });
};

/**
 *
 */
MobileConsole.prototype.pushNodePage = function (node) {
    this.pushPage(new NodePage().initialize(this, node));
};

/**
 *
 */
MobileConsole.prototype.pushHomePage = function () {
    if (this.settings.server === 'local') {
        this.rootPage(new NodePage().initialize(this, this.node));
    }
    else {
        if (!this.loggedInUser) {
            this.rootPage(this.loginPage = new LoginPage().initialize(this));
        }
        else {
            this.rootPage(new MeshesPage().initialize(this));
        }
    }
};

/**
 *
 */
MobileConsole.prototype.pushGroupPage = function (group) {
    this.pushPage(new GroupPage().initialize(this, group));
};

/**
 *
 */
MobileConsole.prototype.pushDevicePage = function (device) {
    this.pushPage(new DevicePage().initialize(this, device));
};

/**
 *
 */
MobileConsole.prototype.pushActorPage = function (actor) {
    this.pushPage(new ActorPage().create(this, actor));
};

/**
 *
 */
MobileConsole.prototype.pushSensorPage = function (sensor) {
    this.pushPage(new SensorPage.initialize(this, sensor));
};

/**
 *
 */
MobileConsole.prototype.pushDeviceMonitoringPage = function (device) {
    this.pushPage(new DeviceMonitoringPage().initialize(this, device));
};

/**
 *
 */
MobileConsole.prototype.pushSensorMonitoringPage = function (sensor) {
    this.pushPage(new SensorMonitoringPage().initialize(this, sensor));
};

/**
 *
 */
MobileConsole.prototype.pushDataPage = function (data) {
    this.pushPage(new DataPage().initialize(this, data));
};

/**
 *
 */
MobileConsole.prototype.pushSettingsPage = function () {
    this.pushPage(new SettingsPage().initialize(this));
};

/**
 *
 */
MobileConsole.prototype.pushUserManagementPage = function () {
    this.pushPage(new UserManagementPage().initialize(this));
};

/**
 *
 */
MobileConsole.prototype.openMessageDialog = function (message, type) {
    this.messageDialog.message = message;
    this.messageDialog.type = type;

    this.Ui.turnOn("messageDialog");

    this.safeApply();
};

/**
 *
 */
MobileConsole.prototype.openConfirmationDialog = function (message, action) {
    this.confirmationDialog.message = message;
    this.confirmationDialog.action = action;

    this.Ui.turnOn("confirmationDialog");
};

/**
 *
 */
MobileConsole.prototype.confirmConfirmationDialog = function () {
    this.confirmationDialog.action();
    this.Ui.turnOff("confirmationDialog");
}

/**
 *
 */
MobileConsole.prototype.pushUserPage = function (user) {
    this.pushPage(SettingsPage.create(this, user));
};

/**
 *
 */
MobileConsole.prototype.pushDevicesConfigurationPage = function () {
    this.pushPage(new DevicesConfigurationPage().initialize(this));
};

/**
 *
 */
MobileConsole.prototype.pushDeviceConfigurationPage = function (device) {
    this.pushPage(new DeviceConfigurationPage().initialize(this, device));
};

/**
 *
 */
MobileConsole.prototype.pushActorConfigurationPage = function (actor) {
    this.pushPage(new ActorConfigurationPage().initialize(this, actor));
};

/**
 *
 */
MobileConsole.prototype.pushSensorConfigurationPage = function (sensor) {
    this.pushPage(new SensorConfigurationPage().initialize(this, sensor));
};

/**
 *
 */
MobileConsole.prototype.openUserCreationDialog = function () {
    this.userCreationDialog.user = {};
};

/**
 *
 */
MobileConsole.prototype.createUser = function () {
    this.consoleService.createUser(this.node, this.userCreationDialog.user).done(function () {
        this.openMessageDialog("User created");
    }.bind(this)).fail(function (error) {
        this.openMessageDialog(error);
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.isDeviceInGroups = function (node, device) {
    for (var n in node.groups) {
        if (node.groups[n].containsDevice(device)) {
            return true;
        }
    }

    return false;
};

/**
 *
 */
MobileConsole.prototype.isActorInGroups = function (node, actor) {
    for (var n in node.groups) {
        if (node.groups[n].containsActor(actor)) {
            return true;
        }
    }

    return false;
};

/**
 *
 */
MobileConsole.prototype.isSensorInGroups = function (node, sensor) {
    for (var n in node.groups) {
        if (node.groups[n].containsSensor(sensor)) {
            return true;
        }
    }

    return false;
};

/**
 *
 */
MobileConsole.prototype.pushSensorValue = function (sensor) {
    // TODO Deprecated cannot create sensor value from UI
    //this.consoleService.pushSensorValue(sensor).done(
    //    function () {
    //    }).fail(function (error) {
    //        console.trace(error);
    //
    //        this.openMessageDialog("Cannot push Sensor Event.");
    //    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.pushSensorEvent = function (sensor,
                                                    event) {
    // TODO Deprecated cannot create sensor value from UI
    //var self = this;
    //
    //this.consoleService
    //    .pushSensorEvent(sensor, event)
    //    .done(function () {
    //    })
    //    .fail(
    //    function (error) {
    //        console.trace(error);
    //
    //        this
    //            .openMessageDialog(error, "error");
    //    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.onDeviceStateChanged = function (stateChange) {
    try {
        var device = this.node.getDevice(stateChange.device);

        device._state = stateChange.state;
        device.lastStateChangeTimestamp = new Date().getTime();

        this.addDeviceState(device, stateChange.state);

        if (this.topPage().id == "deviceMonitoringPage"
            && this.topPage().device == device) {
            this.topPage().updatePlots();
        }

    }
    catch (error) {
        console.log(error);

        // Device may not be registered yet and is already firing updates
    }
};

/**
 *
 */
MobileConsole.prototype.onActorStateChanged = function (stateChange) {
    var actor = this.node.getDevice(stateChange.device)
        .getActor(stateChange.actor);

    actor._state = stateChange.state;
    actor.lastStateChangeTimestamp = new Date().getTime();
};

/**
 *
 */
MobileConsole.prototype.onStoryboardProgress = function (storyboardProgress) {
    var service = this.node.getService(storyboardProgress.storyboard);

    service._elapsedTime = storyboardProgress.elapsedTime;

    // elapsedTime may be 0 which is different from null

    if (storyboardProgress.elapsedTime == null) {
        service._status = "stopped";
    }
};

/**
 *
 */
MobileConsole.prototype.onDeviceAdvertisement = function (device) {
    this.deviceAdvertisementDialog.device = device;

    this.safeApply();
    this.openDeviceAdvertisementDialog();
};


/**
 *
 */
MobileConsole.prototype.callNodeService = function (node, service, parameters) {
    if (service.type == "storyboard") {
        service._status = "playing";
        service._elapsedTime = 0;
    }

    this.consoleService.callNodeService(node, service, parameters)
        .done(function () {
        }).fail(function (error) {
            this
                .openMessageDialog(error, "error");
        }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.startStoryboard = function (node, storyboard) {
    storyboard._status = "playing";
    storyboard._elapsedTime = 0;

    this.consoleService.callNodeService(node, storyboard)
        .done(function () {
        }).fail(function (error) {
            this
                .openMessageDialog(error, "error");
        }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.playStoryboard = function (node, storyboard) {
    this.consoleService.playStoryboard(node, storyboard)
        .done(function () {
            storyboard._status = "playing";
        }).fail(function (error) {
            this
                .openMessageDialog(error, "error");
        }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.pauseStoryboard = function (node, storyboard) {
    this.consoleService.pauseStoryboard(node, storyboard)
        .done(function () {
            storyboard._status = "paused";
        }).fail(function (error) {
            this
                .openMessageDialog(error, "error");
        }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.stopStoryboard = function (node, storyboard) {
    this.consoleService.stopStoryboard(node, storyboard)
        .done(function () {
            storyboard._status = "stopped";
        }).fail(function (error) {
            this
                .openMessageDialog(error, "error");
        }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.callDeviceService = function (device, service, parameters) {
    this.consoleService.callDeviceService(device, service, parameters)
        .done(function () {
        }).fail(function (error) {
            console.trace(error);

            this
                .openMessageDialog(error, "error");
        }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.callActorService = function (actor,
                                                     service, parameters) {
    this.consoleService.callActorService(actor, service,
        parameters).done(function () {
        }).fail(function (error) {
            console.trace(error);

            this
                .openMessageDialog(error, "error");
        }.bind(this));
};

/*
 *
 */
MobileConsole.prototype.getComponentPluginPath = function (component) {
    return this.consoleService.getComponentPluginPath(
        component);
};

/*
 *
 */
MobileConsole.prototype.getComponentPluginDirectory = function (component) {
    return this.consoleService.getComponentPluginDirectory(
        component);
};

/**
 *
 */
MobileConsole.prototype.addDeviceState = function (device,
                                                   state) {
    if (!this.plotData[device.id]) {
        return;
    }

    for (var n in device.__type.state) {
        var field = device.__type.state[n];

        if (field.type.id != "number") {
            continue;
        }

        var plotData = this.plotData[device.id][field.id];
        var now = new Date().getTime();

        while (plotData.series[0][0] < now - plotData.interval) {
            plotData.series.shift();
        }

        plotData.series.push([now, state[field.id]]);
    }
};

/**
 *
 */
MobileConsole.prototype.addValue = function (device, sensor,
                                             value) {
    if (!this.sensorPlotData[device]
        || !this.sensorPlotData[device][sensor]) {
        return;
    }

    var plotData = this.sensorPlotData[device][sensor];
    var now = new Date().getTime();

    while (plotData.series[0][0] < now - plotData.interval) {
        plotData.series.shift();
    }

    plotData.series.push([now, value]);
};

/**
 *
 */
MobileConsole.prototype.writeToDeviceStream = function (device,
                                                        value) {
};

/**
 *
 */
MobileConsole.prototype.loggedInUserIsAdministrator = function (time) {
    if (!this.loggedInUser) {
        return false;
    }

    return this.loggedInUser.hasRole("administrator");
};

/**
 *
 */
MobileConsole.prototype.openDeviceDialog = function (device) {
    if (device) {
        this.deviceDialog.device = device;
        this.deviceDialog.mode = "update";
    } else {
        this.deviceDialog.device = {configuration: {}};
        this.deviceDialog.mode = "create";
    }
};

/**
 *
 */
MobileConsole.prototype.createDevice = function (device) {
    device.id = device.label; // TODO Make identifier

    this.consoleService.createDevice(this.node, device).done(function (node) {
        this.node = node;

        this.safeApply();
    }.bind(this)).fail(function (error) {
        console.error(error);
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.updateDevice = function (device) {
    this.consoleService.updateDevice(this.node, device).done(function (node) {
        this.node = node;

        this.safeApply();
    }.bind(this)).fail(function (error) {
        console.error(error);
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.deleteDevice = function (device) {
    this.openConfirmationDialog("You are going to delete Device [" + device.label + "].", function () {
        this.consoleService.deleteDevice(this.node, device).done(function (node) {
            this.node = node;

            this.safeApply();
        }.bind(this)).fail(function (error) {
            this.openMessageDialog(error, "error");
        }.bind(this));
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.openActorDialog = function (device, actor) {
    this.actorDialog.device = device;

    if (actor) {
        this.actorDialog.actor = actor;
    } else {
        this.actorDialog.actor = {configuration: {}};
    }
};

/**
 *
 */
MobileConsole.prototype.createActor = function (device, actor) {
    actor.id = actor.label; // TODO Make identifier

    this.consoleService.createActor(this.node, device, actor).done(function (node) {
        this.node = node;

        this.safeApply();
    }.bind(this)).fail(function (error) {
        console.error(error);
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.updateActor = function (device, actor) {
    this.consoleService.updateActor(this.node, device, actor).done(function (node) {
        this.node = node;

        this.safeApply();
    }.bind(this)).fail(function (error) {
        console.error(error);
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.deleteActor = function (actor) {
    this.openConfirmationDialog("You are going to delete Actor [" + actor.label + "].", function () {
        this.consoleService.deleteActor(this.node, actor).done(function (node) {
            this.node = node;

            this.safeApply();
        }.bind(this)).fail(function (error) {
            this.openMessageDialog(error, "error");
        }.bind(this));
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.openSensorDialog = function (device, sensor) {
    this.sensorDialog.device = device;

    if (sensor) {
        this.sensorDialog.sensor = sensor;
    } else {
        this.sensorDialog.sensor = {configuration: {}};
    }
};

/**
 *
 */
MobileConsole.prototype.createSensor = function (device, sensor) {
    sensor.id = sensor.label; // TODO Make identifier

    this.consoleService.createSensor(this.node, device, sensor).done(function (node) {
        this.node = node;

        this.safeApply();
    }.bind(this)).fail(function (error) {
        console.error(error);
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.updateSensor = function (device, sensor) {
    this.consoleService.updateSensor(this.node, device, sensor).done(function (node) {
        this.node = node;

        this.safeApply();
    }.bind(this)).fail(function (error) {
        console.error(error);
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.deleteSensor = function (sensor) {
    this.openConfirmationDialog("You are going to delete Sensor [" + sensor.label + "].", function () {
        this.consoleService.deleteSensor(this.node, sensor).done(function (node) {
            this.node = node;

            this.safeApply();
        }.bind(this)).fail(function (error) {
            this.openMessageDialog(error, "error");
        }.bind(this));
    }.bind(this));
};

/**
 *
 */
MobileConsole.prototype.actorType = function (device, actorType) {
    if (!device || !actorType) {
        return null;
    }

    var deviceType = this.consoleService.deviceTypes[device.plugin];

    for (var n in deviceType.actorTypes) {
        if (deviceType.actorTypes[n].plugin == actorType) {
            return deviceType.actorTypes[n];
        }
    }

    return null;
};

/**
 *
 */
MobileConsole.prototype.sensorType = function (device, sensorType) {
    if (!device || !sensorType) {
        return null;
    }

    var deviceType = this.consoleService.deviceTypes[device.plugin];

    for (var n in deviceType.sensorTypes) {
        if (deviceType.sensorTypes[n].plugin == sensorType) {
            return deviceType.sensorTypes[n];
        }
    }

    return null;
};

/*
 *
 */
MobileConsole.prototype.safeApply = function (fn) {
    if (this.rootScope && (this.rootScope.$$phase == "$apply" || this.rootScope.$$phase == "$digest")) {
        if (fn && (typeof (fn) === 'function')) {
            fn();
        }
    } else {
        this.rootScope.$apply(fn);
    }
};

angular.module('ThingItMobile.Main', [])
    .controller('mobileConsole', MobileConsole);