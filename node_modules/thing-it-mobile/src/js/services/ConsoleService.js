function ConsoleService($http) {
    this.http = $http;
}

/**
 *
 */
ConsoleService.prototype.initializeSettings = function () {
    this.settings = {};

    if (window.localStorage["thing-it.server"] != undefined &&
        window.localStorage["thing-it.host"] != undefined &&
        window.localStorage["thing-it.host"] != undefined) {
        this.settings.server = window.localStorage["thing-it.server"];
        this.settings.host = window.localStorage["thing-it.host"];
        this.settings.port = window.localStorage["thing-it.port"];
    }
    else {
        this.settings.server = "proxy";
        this.settings.host = "http://www.thing-it.com";
        this.settings.port = 80;
    }

    console.log("Settings", this.settings);
};

/**
 *
 */
ConsoleService.prototype.persistSettings = function () {
    window.localStorage["thing-it.server"] = this.settings.server;
    window.localStorage["thing-it.host"] = this.settings.host;
    window.localStorage["thing-it.port"] = this.settings.port;
};

/**
 *
 */
ConsoleService.prototype.refreshRootUrl = function () {
    this.rootUrl = "http://" + this.settings.host + ":" + this.settings.port;
};

/**
 *
 */
ConsoleService.prototype.get = function (url) {
    if (this.http) {
        var deferred = $.Deferred();

        console.log("Invoking GET " + url);

        this.http.get(url).success(function (data) {
            deferred.resolve(data);
        }).error(function (error) {
            console.trace(error);

            deferred.reject(error);
        });

        return deferred.promise();
    }
    else {
        return Utils.ajax(url, "GET",
            "application/json");
    }
};

/**
 *
 */
ConsoleService.prototype.post = function (url, data) {
    if (this.http) {
        var deferred = $.Deferred();

        this.http.post(url, Utils
            .cloneFiltered(data, /\_\_|\$\$/)).success(function (data) {
            deferred.resolve(data);
        }).error(function (data) {
            deferred.reject(data);
        });

        return deferred.promise();
    }
    else {
        return Utils.ajax(url + "/plugins", "POST",
            "application/json", JSON.stringify(Utils
                .cloneFiltered(data, /\_\_|\$\$/)));
    }
};

/**
 *
 */
ConsoleService.prototype.put = function (url, data) {
    if (this.http) {
        var deferred = $.Deferred();

        this.http.put(url, data).success(function (data) {
            deferred.resolve(data);
        }).error(function (data) {
            deferred.reject(data);
        });

        return deferred.promise();
    }
    else {
        return Utils.ajax(this.rootUrl + "/plugins", "PUT",
            "application/json", JSON.stringify(Utils
                .cloneFiltered(data, /\_\_|\$\$/)));
    }
};

/**
 *
 */
ConsoleService.prototype.delete = function (url) {
    if (this.http) {
        var deferred = $.Deferred();

        this.http.delete(url).success(function (data) {
            deferred.resolve(data);
        }).error(function (data) {
            deferred.reject(data);
        });

        return deferred.promise();
    }
    else {
        return Utils.ajax(this.rootUrl + "/plugins", "DELETE",
            "application/json");
    }
};

/**
 * TODO May homogenize local URL to contain UUID as well.
 */
ConsoleService.prototype.getNodeRootUrl = function (node) {
    if (this.settings.server === "local") {
        return this.rootUrl;
    }
    else {
        return this.rootUrl + "/nodes/" + node.uuid;
    }
};

/**
 *
 * @param node
 * @returns {string}
 */
ConsoleService.prototype.getEventNamespaceUrl = function (node) {
    console.log(node);

    if (this.settings.server === "local") {
        return this.rootUrl + "/events";
    }
    else {
        //if (node.connectionMode == "test") {
        //    return this.rootUrl + "/nodes/" + node.uuid + "/events";
        //} else if (node.connectionMode == "reverseProxy") {
            return this.rootUrl + "/reverse-proxy/nodes/" + node.uuid + "/client/events";
//        }
    }
};

/**
 *
 * @param node
 * @returns {string}
 */
ConsoleService.prototype.getComponentRootUrl = function (node) {
    if (this.settings.server === "local") {
        return this.rootUrl;
    }
    else {
        return this.rootUrl + "/thing-it-node";
    }
};

/**
 *
 */
ConsoleService.prototype.getSettings = function () {
    var deferred = $.Deferred();

    this.get(this.rootUrl + "/settings").done(function (settings) {
        this.settings = settings;

        console.log("Settings ===>");
        console.log(settings);

        deferred.resolve(settings);
    }.bind(this)).fail(function () {
        deferred.reject();
    });

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.getDeviceTypes = function () {
    var deferred = $.Deferred();

    this.get(this.rootUrl + "/plugins").done(function (deviceTypes) {
        this.deviceTypes = deviceTypes; // TODO May need to change if Device Types vary between Nodes

        deferred.resolve(deviceTypes);
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    });

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.login = function (credentials) {
    return this.post(this.rootUrl + "/login", JSON.stringify(credentials));
};

/**
 *
 */
ConsoleService.prototype.logout = function () {
    return this.post(this.rootUrl + "/logout");
};

/**
 *
 */
ConsoleService.prototype.getMeshes = function () {
    return this.get(this.rootUrl + "/meshes");
};

/**
 *
 */
ConsoleService.prototype.getMesh = function (mesh) {
    return this.get(this.rootUrl + "/meshes/" + mesh._id);
};

/**
 *
 */
ConsoleService.prototype.bindNode = function (node) {
    return bindNode(this.deviceTypes,
        node);
};

/**
 *
 */
ConsoleService.prototype.getNode = function (node) {
    var deferred = $.Deferred();
    var uuid = node.uuid; // TODO Hack. Improve.

    this.get(this.getNodeRootUrl(node) + "/configuration").done(function (data) {
        data.configuration.uuid = uuid;

        deferred.resolve(this.bindNode(data.configuration));
    }.bind(this)).fail(function (error) {
        console.error(error);

        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.getNodeState = function (node) {
    return this.get(this.getNodeRootUrl(node) + "/state");
};

/**
 *
 */
ConsoleService.prototype.connectNode = function (io, node) {
    var transports;

    if ("WebSocket" in window && WebSocket.CLOSED > 2) {
        ['websocket', 'xhr-polling']
    } else {
        ['xhr-polling']
    }

    var namespace = io.connect(this.getEventNamespaceUrl(node), {
        transports: transports
    });

    console.log("WebSocket Namespace created at " + this.getEventNamespaceUrl(node));

    namespace.on('connection', function () {
        console.log("WebSocket Namespace connected at " + this.getEventNamespaceUrl(node));
    }.bind(this));
    namespace.on('disconnect', function () {
        console.log("WebSocket Namespace disconnected at " + this.getEventNamespaceUrl(node));
    }.bind(this));

    window.setTimeout(function () {
        // Force Node to push state for all Devices and Actors

        Utils.ajax(this.getNodeRootUrl(node) + "/poll", "POST",
            "application/json");
    }.bind(this), 500);

    return namespace;
};

/**
 *
 */
ConsoleService.prototype.callNodeService = function (node, service, parameters) {
    return this.post(this.getNodeRootUrl(node) + "/services/" + service.id, parameters);
};

/**
 *
 */
ConsoleService.prototype.playStoryboard = function (node, storyboard) {
    return this.post(this.getNodeRootUrl(node) + "/storyboards/" + storyboard.id + "/play");
};

/**
 *
 */
ConsoleService.prototype.pauseStoryboard = function (node, storyboard) {
    return this.post(this.getNodeRootUrl(node) + "/storyboards/" + storyboard.id + "/pause");
};

/**
 *
 */
ConsoleService.prototype.stopStoryboard = function (node, storyboard) {
    return this.post(this.getNodeRootUrl(node) + "/storyboards/" + storyboard.id + "/stop");
};

/**
 *
 */
ConsoleService.prototype.callDeviceService = function (device, service, parameters) {
    return this.post(this.getNodeRootUrl(device.__node) + "/devices/" + device.id
        + "/services/" + service, parameters);
};

/**
 *
 */
ConsoleService.prototype.callActorService = function (actor, service,
                                                      parameters) {
    return this.post(this.getNodeRootUrl(actor.device.__node) + "/devices/" + actor.device.id
        + "/actors/" + actor.id + "/services/" + service, parameters);
};

/**
 *
 */
ConsoleService.prototype.pushSensorValue = function (sensor, value) {
    return this.post(this.getNodeRootUrl(sensor.device.__node) + "/devices/" + sensor.device.id
        + "/sensors/" + sensor.id + "/data", {
        data: sensor._value
    });
};

/**
 *
 */
ConsoleService.prototype.pushSensorEvent = function (sensor, event) {
    return this.post(this.getNodeRootUrl(sensor.device.__node) + "/devices/" + sensor.device.id
        + "/sensors/" + sensor.id + "/event", {
        type: event
    });
};

/**
 *
 */
ConsoleService.prototype.getDataValue = function (node, data) {
    return this.get(this.getNodeRootUrl(node) + "/data/" + data.id);
};

/**
 *
 */
ConsoleService.prototype.registerDevice = function (node, device) {
    return this.post(this.getNodeRootUrl(node) + "/devices/" + device.uuid + "/register", device);
};

/**
 *
 */
ConsoleService.prototype.getComponentPluginDirectory = function (component) {
    if (!component) {
        return null;
    }

    if (component.device) {
        if (!component.device.__type) {
            return null;
        }

        // Actors and Sensors

        return this.getComponentRootUrl()
            + component.device.__type.pluginDirectory + "/web/";
    }
    else {
        if (!component.__type) {
            return null;
        }

        return this.getComponentRootUrl() + component.__type.pluginDirectory + "/web/";
    }
};

/**
 *
 */
ConsoleService.prototype.getComponentPluginPath = function (component) {
    if (!component || !component.__type) {
        return null;
    }

    return this.getComponentPluginDirectory(component) + component.__type.family + ".html";
};

/**
 *
 */
ConsoleService.prototype.getUsers = function (node) {
    return this.get(this.getNodeRootUrl(node) + "/users");
};

/**
 *
 */
ConsoleService.prototype.getUser = function (id) {
    return this.get(this.getNodeRootUrl(node) + "/users/" + id);
};

/**
 *
 */
ConsoleService.prototype.createUser = function (node, user) {
    return this.post(this.getNodeRootUrl(node) + "/users", user);
};

/**
 *
 */
ConsoleService.prototype.updateUser = function (node, user) {
    return this.put(this.getNodeRootUrl(node) + "/users/" + user);
};

/**
 *
 */
ConsoleService.prototype.createDevice = function (node, device) {
    var deferred = $.Deferred();

    this.post(this.getNodeRootUrl(node) + "/devices/", device).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.updateDevice = function (node, device) {
    var deferred = $.Deferred();

    this.put(this.getNodeRootUrl(node) + "/devices/" + device.id, device).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.deleteDevice = function (node, device) {
    var deferred = $.Deferred();

    this.delete(this.getNodeRootUrl(node) + "/devices/" + device.id).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.createActor = function (node, device, actor) {
    var deferred = $.Deferred();

    this.post(this.getNodeRootUrl(node) + "/devices/" + device.id + "/actors", actor).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.updateActor = function (node, actor) {
    var deferred = $.Deferred();

    this.put(this.getNodeRootUrl(node) + "/devices/" + actor.device.id + "/actors/" + actor.id, actor).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.deleteActor = function (node, actor) {
    var deferred = $.Deferred();

    this.delete(this.getNodeRootUrl(node) + "/devices/" + actor.device.id + "/actors/" + actor.id).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.createSensor = function (node, device, sensor) {
    var deferred = $.Deferred();

    this.post(this.getNodeRootUrl(node) + "/devices/" + device.id + "/sensors", sensor).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.updateSensor = function (node, sensor) {
    var deferred = $.Deferred();

    this.put(this.getNodeRootUrl(node) + "/devices/" + sensor.device.id + "/sensors/" + sensor.id, sensor).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.deleteSensor = function (node, sensor) {
    var deferred = $.Deferred();

    this.delete(this.getNodeRootUrl(node) + "/devices/" + sensor.device.id + "/sensors/" + sensor.id).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.createService = function (node, service) {
    var deferred = $.Deferred();

    this.post(this.getNodeRootUrl(node) + "/configuration/services", service).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.updateService = function (node, service) {
    var deferred = $.Deferred();

    this.put(this.getNodeRootUrl(node) + "/configuration/services/" + service.id, service).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.deleteService = function (node, service) {
    var deferred = $.Deferred();

    this.delete(this.getNodeRootUrl(node) + "/configuration/services/" + service.id).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.createGroup = function (node, group) {
    var deferred = $.Deferred();

    this.post(this.getNodeRootUrl(node) + "/configuration/groups", group).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.updateGroup = function (node, group) {
    var deferred = $.Deferred();

    this.put(this.getNodeRootUrl(node) + "/configuration/groups/" + group.id, group).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

/**
 *
 */
ConsoleService.prototype.deleteGroup = function (node, group) {
    var deferred = $.Deferred();

    this.delete(this.getNodeRootUrl(node) + "/configuration/groups/" + group.id).done(function (node) {
        deferred.resolve(this.bindNode(node));
    }.bind(this)).fail(function (error) {
        deferred.reject(error);
    }.bind(this));

    return deferred.promise();
};

angular.module('ThingItMobile.ConsoleService', [])
    .service('consoleService', ConsoleService);
