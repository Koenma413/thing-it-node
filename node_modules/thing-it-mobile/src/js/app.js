var app = angular.module('ThingItMobile', [
    'ngRoute',
    'mobile-angular-ui',
    "mobile-angular-ui.gestures",
    'ThingItMobile.ConsoleService',
    "ThingItMobile.Directives",
    'ThingItMobile.Main'
]);

app.config(function ($routeProvider) {
    $routeProvider.when('/', {templateUrl: 'loginPage.html', reloadOnSearch: false});
    $routeProvider.when('/login', {templateUrl: 'loginPage.html', reloadOnSearch: false});
    $routeProvider.when('/meshes', {templateUrl: 'meshesPage.html', reloadOnSearch: false});
    $routeProvider.when('/mesh', {templateUrl: 'meshPage.html', reloadOnSearch: false});
    $routeProvider.when('/node', {templateUrl: 'nodePage.html', reloadOnSearch: false});
    $routeProvider.when('/group', {templateUrl: 'groupPage.html', reloadOnSearch: false});
    $routeProvider.when('/device', {templateUrl: 'devicePage.html', reloadOnSearch: false});
    $routeProvider.when('/actor', {templateUrl: 'actorPage.html', reloadOnSearch: false});
    $routeProvider.when('/sensor', {templateUrl: 'sensorPage.html', reloadOnSearch: false});
    $routeProvider.when('/deviceMonitoring', {templateUrl: 'deviceMonitoringPage.html', reloadOnSearch: false});
    $routeProvider.when('/userManagement', {templateUrl: 'userManagementPage.html', reloadOnSearch: false});
    $routeProvider.when('/user', {templateUrl: 'userPage.html', reloadOnSearch: false});
    $routeProvider.when('/settings', {templateUrl: 'settingsPage.html', reloadOnSearch: false});
    $routeProvider.when('/devicesConfiguration', {templateUrl: 'devicesConfigurationPage.html', reloadOnSearch: false});
    $routeProvider.when('/deviceConfiguration', {templateUrl: 'deviceConfigurationPage.html', reloadOnSearch: false});
    $routeProvider.when('/deviceConfigurationDialog', {templateUrl: 'deviceConfigurationDialog.html', reloadOnSearch: false});
    $routeProvider.when('/actorConfiguration', {templateUrl: 'actorConfigurationPage.html', reloadOnSearch: false});
    $routeProvider.when('/actorConfigurationDialog', {templateUrl: 'actorConfigurationDialog.html', reloadOnSearch: false});
    $routeProvider.when('/sensorConfiguration', {templateUrl: 'sensorConfigurationPage.html', reloadOnSearch: false});
    $routeProvider.when('/sensorConfigurationDialog', {templateUrl: 'sensorConfigurationDialog.html', reloadOnSearch: false});
    $routeProvider.when('/groupConfiguration', {templateUrl: 'groupConfigurationPage.html', reloadOnSearch: false});
    $routeProvider.when('/serviceConfiguration', {templateUrl: 'serviceConfigurationPage.html', reloadOnSearch: false});
});
app.config(function ($sceDelegateProvider) {
    $sceDelegateProvider.resourceUrlWhitelist([
        // Allow same origin resource loads.
        'self',
        // Allow loading from outer templates domain.
        'http://**',
    ]);
});

/**
 * Does not write to the model! Could do if we would block watches during change.
 */
function bufferedChange(scope, element, value, tiChange,
                        bufferLength) {
    if (new Date().getTime()
        - jQuery(element).data("lastChangeTimestamp") < bufferLength) {
    } else {
        jQuery(element).data("lastChangeTimestamp",
            new Date().getTime());

        // Apply the change and start next buffer interval

        if (tiChange) {
            scope.$eval(tiChange);
        }
    }
}
